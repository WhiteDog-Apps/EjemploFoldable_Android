<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ScreenGeneratorConfiguration">
    <option name="settings">
      <Settings>
        <option name="categories">
          <list>
            <Category>
              <option name="name" value="MVP Activity" />
            </Category>
            <Category>
              <option name="id" value="1" />
              <option name="name" value="MVP Fragment" />
            </Category>
          </list>
        </option>
        <option name="screenElements">
          <list>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%component%" />
              <option name="name" value="Activity" />
              <option name="relatedAndroidComponent" value="Activity" />
              <option name="template" value="package %packageName%&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.viewModels&#10;import androidx.databinding.DataBindingUtil&#10;&#10;class %screenName%%component% : BaseActivity(), %screenName%Contract.View {&#10;&#10;    private lateinit var binding: Activity%screenName%Binding&#10;    private lateinit var controller: %screenName%Contract.Controller&#10;&#10;    private val viewModel: %screenName%ViewModel by viewModels()&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        controller = %screenName%Controller(applicationContext, this, viewModel)&#10;&#10;        binding = DataBindingUtil.setContentView(this, R.layout.%componentLowerCase%_%screenNameSnakeCase%)&#10;        binding.controller = controller&#10;        binding.viewModel = viewModel&#10;        binding.lifecycleOwner = this&#10;&#10;        controller.onCreate()&#10;    }&#10;&#10;    override fun getActivity(): BaseActivity {&#10;        return this&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun mostrarIntent(intent: Intent) {&#10;        startActivity(intent)&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun finalizarActivity() {&#10;        finish()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        controller.onDestroy()&#10;&#10;        super.onDestroy()&#10;    }&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%componentLowerCase%_%screenNameSnakeCase%" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="layout" />
              <option name="relatedAndroidComponent" value="Activity" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;data&gt;&#10;        &lt;variable&#10;            name=&quot;controller&quot;&#10;            type=&quot;%packageName%.%screenName%Contract.Controller&quot; /&gt;&#10;&#10;        &lt;variable&#10;            name=&quot;viewModel&quot;&#10;            type=&quot;%packageName%.%screenName%ViewModel&quot; /&gt;&#10;    &lt;/data&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:animateLayoutChanges=&quot;true&quot;&#10;        tools:context=&quot;%packageName%.%screenName%Activity&quot;&gt;&#10;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/layout&gt;" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Contract" />
              <option name="template" value="package %packageName%&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;&#10;interface %screenName%%screenElement% {&#10;&#10;    interface View {&#10;        fun onCreate(savedInstanceState: Bundle?)&#10;&#10;        fun getActivity(): BaseActivity&#10;&#10;        fun mostrarIntent(intent: Intent)&#10;&#10;        fun finalizarActivity()&#10;        fun onDestroy()&#10;    }&#10;&#10;    interface Controller {&#10;        fun onCreate()&#10;&#10;        fun onVolverClick()&#10;        fun onButtonClick()&#10;&#10;        fun onDestroy()&#10;    }&#10;&#10;    interface ViewModel {&#10;&#10;    }&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Controller" />
              <option name="template" value="package %packageName%&#10;&#10;import android.content.Context&#10;import android.content.Intent&#10;&#10;class %screenName%%screenElement%(private val context: Context, private val view: %screenName%Contract.View, private val viewModel: %screenName%ViewModel): %screenName%Contract.Controller {&#10;&#10;    override fun onCreate() {&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun onVolverClick() {&#10;        view.finalizarActivity()&#10;    }&#10;&#10;    override fun onButtonClick() {&#10;        //mostrarIntent(Intent(context, SecondActivity::class.java), true)&#10;    }&#10;&#10;    private fun mostrarIntent(intent: Intent, finalizarActual: Boolean = false) {&#10;        view.mostrarIntent(intent)&#10;        &#10;        if(finalizarActual) {&#10;            view.finalizarActivity()&#10;        }&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun onDestroy() {&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModel" />
              <option name="template" value="package %packageName%&#10;&#10;import androidx.lifecycle.ViewModel&#10;&#10;class %screenName%%screenElement% : ViewModel(), %screenName%Contract.ViewModel {&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="1" />
              <option name="fileNameTemplate" value="%screenName%%component%" />
              <option name="name" value="Fragment" />
              <option name="relatedAndroidComponent" value="Fragment" />
              <option name="template" value="package %packageName%&#10;&#10;import androidx.lifecycle.ViewModelProvider&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.databinding.DataBindingUtil&#10;&#10;class %screenName%%component%: BaseFragment(), %screenName%Contract.View {&#10;&#10;    companion object {&#10;        @JvmStatic&#10;        fun newInstance() = %screenName%%component%()&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override val tipo: TipoPantallaHome = TipoPantallaHome.MI_PERFIL&#10;&#10;    private lateinit var binding: Fragment%screenName%Binding&#10;    private lateinit var controller: %screenName%Contract.Controller&#10;    private lateinit var viewModel: %screenName%ViewModel&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {&#10;        binding = DataBindingUtil.inflate(inflater, R.layout.%componentLowerCase%_%screenNameSnakeCase%, container, false)&#10;&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        viewModel = ViewModelProvider(this)[%screenName%ViewModel::class.java]&#10;        controller = %screenName%Controller(context, this, viewModel)&#10;&#10;        binding.controller = controller&#10;        binding.viewModel = viewModel&#10;        binding.lifecycleOwner = this&#10;&#10;        controller.onCreate()&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun getFragment(): BaseFragment {&#10;        return this&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun onBackPressed(): Boolean {&#10;        var backPressedEjecutado: Boolean = false&#10;&#10;        return backPressedEjecutado&#10;    }&#10;&#10;    //-----------------------------------------------------------------------------------&#10;&#10;    override fun onDestroyView() {&#10;        controller.onDestroy()&#10;&#10;        super.onDestroyView()&#10;    }&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="1" />
              <option name="fileNameTemplate" value="%componentLowerCase%_%screenNameSnakeCase%" />
              <option name="fileType" value="Layout XML" />
              <option name="name" value="layout" />
              <option name="relatedAndroidComponent" value="Fragment" />
              <option name="template" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;data&gt;&#10;        &lt;variable&#10;            name=&quot;controller&quot;&#10;            type=&quot;%packageName%.%screenName%Contract.Controller&quot; /&gt;&#10;&#10;        &lt;variable&#10;            name=&quot;viewModel&quot;&#10;            type=&quot;%packageName%.%screenName%ViewModel&quot; /&gt;&#10;    &lt;/data&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:animateLayoutChanges=&quot;true&quot;&#10;        tools:context=&quot;%packageName%.%screenName%Fragment&quot;&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&#10;&lt;/layout&gt;" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="1" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Contract" />
              <option name="template" value="package %packageName%&#10;&#10;interface %screenName%%screenElement% {&#10;&#10;    interface View {&#10;        fun getFragment(): BaseFragment&#10;        &#10;        fun onDestroyView()&#10;    }&#10;&#10;    interface Controller {&#10;        fun onCreate()&#10;&#10;&#10;        fun onDestroy()&#10;    }&#10;&#10;    interface ViewModel {&#10;&#10;    }&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="1" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="Controller" />
              <option name="template" value="package %packageName%&#10;&#10;import android.content.Context&#10;&#10;class %screenName%%screenElement%(private val context: Context?, private val view: %screenName%Contract.View, private val viewModel: %screenName%ViewModel) : %screenName%Contract.Controller {&#10;&#10;    override fun onCreate() {&#10;&#10;    }&#10;&#10;    override fun onDestroy() {&#10;&#10;    }&#10;&#10;}" />
            </ScreenElement>
            <ScreenElement>
              <option name="categoryId" value="1" />
              <option name="fileNameTemplate" value="%screenName%%screenElement%" />
              <option name="name" value="ViewModel" />
              <option name="template" value="package %packageName%&#10;&#10;import androidx.lifecycle.ViewModel&#10;&#10;class %screenName%%screenElement%: ViewModel(), %screenName%Contract.ViewModel {&#10;}" />
            </ScreenElement>
          </list>
        </option>
      </Settings>
    </option>
  </component>
</project>